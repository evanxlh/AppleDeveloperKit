//
//  sysctl.swift
//  AppleDeveloperKit
//
//  Created by Evan Xie on 2023/2/12.
//

import Foundation

/// sysctl ÊòØ‰∏Ä‰∏™Áî®Êù•Âú®Á≥ªÁªüËøê‰Ωú‰∏≠Êü•ÁúãÂèäË∞ÉÊï¥Á≥ªÁªüÂèÇÊï∞ÁöÑÂ∑•ÂÖ∑,ÂÆÉÂåÖÂê´‰∏Ä‰∫õ TCP/IP Â†ÜÊ†àÂíåËôöÊãüÂÜÖÂ≠òÁ≥ªÁªüÁöÑÈ´òÁ∫ßÈÄâÈ°π.
/// [About sysctl 1](https://www.tutorialspoint.com/unix_commands/sysctl.htm),
/// [About sysctl 2](https://developer.aliyun.com/article/52156)
///
/// sysctl ÂèØ‰ª•ËØªÂèñËÆæÁΩÆÂæàÂ§öÁ≥ªÁªüÂèòÈáè, Êü•ÁúãÊâÄÊúâÂèØËØªÂèòÈáèÔºö`sysctl -a`
///
/// Âü∫‰∫éËøôÁÇπÔºåsysctl(8) Êèê‰æõ‰∏§‰∏™ÂäüËÉΩÔºöËØªÂèñÂíå‰øÆÊîπÁ≥ªÁªüËÆæÁΩÆ„ÄÇÊúâÁöÑ sysctl ÂèÇÊï∞Âè™ÊòØÁî®Êù•ÂõûÊä•ÁõÆÂâçÁöÑÁ≥ªÁªüÁä∂ÂÜµÔºå
/// ‰æãÂ¶ÇÂõûÊä•ÁõÆÂâçÂ∑≤ÂºÄÊú∫Êó∂Èó¥„ÄÅÊâÄ‰ΩøÁî®ÁöÑÊìç‰ΩúÁ≥ªÁªüÁâàÊú¨„ÄÅÊ†∏ÂøÉÂêçÁß∞Á≠âÁ≠âÔºõËÄåÊúâÁöÑÂèØ‰ª•ËÆ©Êàë‰ª¨‰øÆÊîπÂèÇÊï∞‰ª•Ë∞ÉÊï¥Á≥ªÁªüËøê‰ΩúÁöÑË°å‰∏∫Ôºå
/// ‰æãÂ¶ÇÁΩëÁªúÊöÇÂ≠òÂÜÖÂ≠òÁöÑÂ§ßÂ∞è„ÄÅÊúÄÂ§ßÁöÑ‰∏äÁ∫ø‰∫∫Êï∞Á≠âÁ≠â„ÄÇËÄåËøô‰∫õÂèØ‰ª•Ë∞ÉÊï¥ÁöÑÂèÇÊï∞‰∏≠ÂøÖÈ°ªÂú®‰∏ÄÂºÄÊú∫Á≥ªÁªüÊâßË°åÂÖ∂ÂÆÉÁ®ãÂ∫èÂâçÂ∞±ËÆæÂÆöÂ•ΩÔºå
/// ÊúâÁöÑÂèØ‰ª•Âú®ÂºÄÊú∫ÂÆåÂêé‰ªªÊÑèË∞ÉÊï¥„ÄÇ
public enum SystemControl {
    
    /// Â∏∏Áî®Á≥ªÁªüÂèòÈáèÁöÑÂêçÂ≠óÔºåË¶ÅÊÉ≥Êü•ÁúãÂÖ®ÈÉ®ÔºåËØ∑Âú® Terminal ‰∏≠ÊâßË°å `sysctl -a` Êü•Áúã.
    public enum Name: String {
        /// Int32, X86 program install on system with ARM cpu.
        case rosettaTranslated = "sysctl.proc_translated"
        
        public enum Hardware: String {
            /// String, eg: x86_64
            case machine = "hw.machine"
            
            /// String, eg: MacBookPro11,5
            case model = "hw.model"
            
            /// Int64, memory in bytes.
            case memorySize = "hw.memsize"
            
            /// Int32(cpu_type_t)
            case cpuType = "hw.cputype"
            
            /// Int32(cpu_subtype_t)
            case cpuSubtype = "hw.cpusubtype"
            
            /// Int32, the number of physical cpu cores
            case cpuPhysicalCores = "hw.physicalcpu"
            
            /// Int32, the number of logical cpu cores
            case cpuLogicalCores = "hw.logicalcpu"
            
            /// Int32, the number of cpu cores or the number of threads.
            case cpuCores = "hw.ncpu"
        }
    
    }
}

public extension SystemControl {
    
    /// Â¶ÇÊûú ARM Á®ãÂ∫èËøêË°åÂú® X86 CPU Êû∂ÊûÑÁöÑËÆ°ÁÆóÊú∫‰∏äÔºåÊàë‰ª¨Â∞±ËØ¥ÂÆÉÊòØ Ë¢´ Rosetta ËΩ¨Êç¢Ëøá‰∫Ü„ÄÇ
    /// Â¶ÇÊûú X86 Á®ãÂ∫èËøêË°åÂú® Intel ËÆ°ÁÆóÊú∫‰∏äÔºå ARM Á®ãÂ∫èËøêË°åÂú® ARM ËÆ°ÁÆóÊú∫‰∏äÔºåÊàë‰ª¨Â∞±Áß∞ÂÆÉ‰ª• Native ÁöÑÊñπÂºèËøêË°å„ÄÇ
    static func isProcessRunningNatively() -> Bool {
        let result: Int32? = fixedWidthIntValue(byName: Name.rosettaTranslated.rawValue)
        if result == nil, errno == ENOENT {
            return true
        }
        return false
    }
    
    static func machine() -> String {
        return stringValue(byName: Name.Hardware.machine.rawValue) ?? ""
    }
    
    static func model() -> String {
        return stringValue(byName: Name.Hardware.model.rawValue) ?? ""
    }
    
    static func numberOfCPUs() -> Int32 {
        return fixedWidthIntValue(byName: Name.Hardware.cpuCores.rawValue) ?? 1
    }
    
    static func memorySize() -> Int64 {
        return fixedWidthIntValue(byName: Name.Hardware.memorySize.rawValue) ?? 0
    }
    
}

// MARK: - Universal Functions

public extension SystemControl {
    
    /// Ëé∑ÂèñÁªìÊûú‰∏∫ int Á±ªÂûã
    static func fixedWidthIntValue<T>(byName name: String) -> T? where T: FixedWidthInteger {
        var result: T = 0
        var size = MemoryLayout<T>.size
        let errorCode = sysctlbyname(name, &result, &size, nil, 0)
        if errorCode != 0 {
            print("üü† sysctlbyname(\(name)) get \(T.self) value error: \(errno)")
            return nil
        }
        return result
    }
    
    static func stringValue(byName name: String) -> String? {
        var size = 0
        
        // 0 on success, or an error code that indicates a problem occurred.
        // Possible error codes include EFAULT, EINVAL, ENOMEM, ENOTDIR, EISDIR, ENOENT, and EPERM.
        var errorCode = sysctlbyname(name, nil, &size, nil, 0)
        if errorCode != 0 {
            print("üü† sysctlbyname(\(name)) get string count error: \(errno)")
            return nil
        }
        
        var result = [CChar](repeating: 0,  count: size)
        errorCode = sysctlbyname(name, &result, &size, nil, 0)
        if errorCode != 0 {
            print("üü† sysctlbyname(\(name)) get string value error: \(errno)")
            return nil
        }
        
        return String(cString: result)
    }
    
}



